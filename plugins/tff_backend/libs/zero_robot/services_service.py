# DO NOT EDIT THIS FILE. This file will be overwritten when re-running go-raml.


class ServicesService:
    def __init__(self, client):
        self.client = client

    def ListActions(self, service_guid, headers=None, query_params=None, content_type="application/json"):
        """
        List all the possible action a service can do.
        It is method for GET /services/{service_guid}/actions
        """
        if query_params is None:
            query_params = {}

        uri = self.client.base_url + "/services/" + service_guid + "/actions"
        return self.client.get(uri, None, headers, query_params, content_type)

    def GetTask(self, task_guid, service_guid, headers=None, query_params=None, content_type="application/json"):
        """
        Retrieve the detail of a task
        It is method for GET /services/{service_guid}/task_list/{task_guid}
        """
        if query_params is None:
            query_params = {}

        uri = self.client.base_url + "/services/" + service_guid + "/task_list/" + task_guid
        return self.client.get(uri, None, headers, query_params, content_type)

    def getTaskList(self, service_guid, all, headers=None, query_params=None, content_type="application/json"):
        """
        Return all the action in the task list
        It is method for GET /services/{service_guid}/task_list
        """
        if query_params is None:
            query_params = {}

        query_params['all'] = all

        uri = self.client.base_url + "/services/" + service_guid + "/task_list"
        return self.client.get(uri, None, headers, query_params, content_type)

    def AddTaskToList(self, data, service_guid, headers=None, query_params=None, content_type="application/json"):
        """
        Add a task to the task list
        It is method for POST /services/{service_guid}/task_list
        """
        if query_params is None:
            query_params = {}

        uri = self.client.base_url + "/services/" + service_guid + "/task_list"
        return self.client.post(uri, data, headers, query_params, content_type)

    def DeleteService(self, service_guid, headers=None, query_params=None, content_type="application/json"):
        """
        Delete a service
        It is method for DELETE /services/{service_guid}
        """
        if query_params is None:
            query_params = {}

        uri = self.client.base_url + "/services/" + service_guid
        return self.client.delete(uri, None, headers, query_params, content_type)

    def GetService(self, service_guid, headers=None, query_params=None, content_type="application/json"):
        """
        Get the detail of a service
        It is method for GET /services/{service_guid}
        """
        if query_params is None:
            query_params = {}

        uri = self.client.base_url + "/services/" + service_guid
        return self.client.get(uri, None, headers, query_params, content_type)

    def UpgradeService(self, data, service_guid, headers=None, query_params=None, content_type="application/json"):
        """
        Upgrade a service from one version to another
        It is method for PUT /services/{service_guid}
        """
        if query_params is None:
            query_params = {}

        uri = self.client.base_url + "/services/" + service_guid
        return self.client.put(uri, data, headers, query_params, content_type)

    def listServices(
            self,
            name,
            template_account,
            template_host,
            template_name,
            template_repo,
            template_uid,
            template_version,
            headers=None,
            query_params=None,
            content_type="application/json"):
        """
        List all the services known by the ZeroRobot.
        It is method for GET /services
        """
        if query_params is None:
            query_params = {}

        query_params['name'] = name
        query_params['template_account'] = template_account
        query_params['template_host'] = template_host
        query_params['template_name'] = template_name
        query_params['template_repo'] = template_repo
        query_params['template_uid'] = template_uid
        query_params['template_version'] = template_version

        uri = self.client.base_url + "/services"
        return self.client.get(uri, None, headers, query_params, content_type)

    def createService(self, data, headers=None, query_params=None, content_type="application/json"):
        """
        create a new service
        It is method for POST /services
        """
        if query_params is None:
            query_params = {}

        uri = self.client.base_url + "/services"
        return self.client.post(uri, data, headers, query_params, content_type)
